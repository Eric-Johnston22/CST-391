{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nexport class MusicServiceService {\n  constructor() {\n    this.artists = [];\n    this.albums = [];\n    this.createArtists();\n    this.createAlbums();\n  }\n  createArtists() {\n    this.artists.push(new Artist(0, 'The Beatles'));\n  }\n  createAlbums() {\n    exampledata.forEach(data => {\n      if (data.artist === 'The Beatles') {\n        const tracks = data.tracks.map(trackData => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n        const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n        this.albums.push(album);\n      }\n    });\n  }\n  getArtists() {\n    return this.artists;\n  }\n  getAlbums(artist) {\n    return this.albums;\n  }\n  getAlbum(artist, id) {\n    const album = this.albums.find(a => a.Artist === artist && a.Id === id);\n    if (album) {\n      const tracks = album.Tracks.map(track => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n      return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n    }\n    return undefined;\n  }\n  createAlbum(album) {\n    this.albums.push(album);\n  }\n  updateAlbum(album) {\n    const index = this.albums.findIndex(a => a.Id === album.Id);\n    if (index !== -1) {\n      this.albums.splice(index, 1, album);\n    }\n  }\n  deleteAlbum(id, artist) {\n    const index = this.albums.findIndex(a => a.Id === id);\n    if (index !== -1) {\n      this.albums.splice(index, 1);\n    }\n  }\n}\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)();\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["exampledata","Album","Artist","Track","MusicServiceService","constructor","artists","albums","createArtists","createAlbums","push","forEach","data","artist","tracks","map","trackData","id","number","title","lyrics","video","album","description","year","image","getArtists","getAlbums","getAlbum","find","a","Id","Tracks","track","Number","Title","Lyrics","Video","Description","Year","Image","undefined","createAlbum","updateAlbum","index","findIndex","splice","deleteAlbum","factory","ɵfac","providedIn"],"sources":["C:\\Coding\\GCU\\CST-391\\week3\\musicapp\\src\\app\\service\\music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport exampledata from '../../data/sample-music-data.json';\n\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n  private readonly artists: Artist[] = [];\n  private readonly albums: Album[] = [];\n\n  constructor() {\n    this.createArtists();\n    this.createAlbums();\n  }\n\n  private createArtists(): void {\n    this.artists.push(new Artist(0, 'The Beatles'));\n  }\n\n  private createAlbums(): void {\n    exampledata.forEach((data: any) => {\n      if (data.artist === 'The Beatles') {\n        const tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n        const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n        this.albums.push(album);\n      }\n    });\n  }\n\n  public getArtists(): Artist[] {\n    return this.artists;\n  }\n\n  public getAlbums(artist: string): Album[] {\n    return this.albums;\n  }\n\n  public getAlbum(artist: string, id: number): Album | undefined {\n    const album = this.albums.find((a) => a.Artist === artist && a.Id === id);\n\n    if (album) {\n      const tracks = album.Tracks.map((track) => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n      return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n    }\n\n    return undefined;\n  }\n\n  public createAlbum(album: Album): void {\n    this.albums.push(album);\n  }\n\n  public updateAlbum(album: Album): void {\n    const index = this.albums.findIndex((a) => a.Id === album.Id);\n\n    if (index !== -1) {\n      this.albums.splice(index, 1, album);\n    }\n  }\n\n  public deleteAlbum(id: number, artist: string): void {\n    const index = this.albums.findIndex((a) => a.Id === id);\n\n    if (index !== -1) {\n      this.albums.splice(index, 1);\n    }\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}