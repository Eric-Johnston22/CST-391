{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MusicServiceService {\n  constructor(http) {\n    this.http = http;\n    this.host = \"http://localhost:5000\";\n    this.albums = exampledata;\n  }\n  getArtists(callback) {\n    this.http.get(this.host + \"/artists\").subscribe(artists => {\n      callback(artists);\n    });\n  }\n  getAlbums(callback) {\n    // Return the list of albums\n    this.http.get(this.host + \"/albums\").subscribe(albums => {\n      callback(albums);\n    });\n  }\n  getAlbumsOfArtist(artistName, callback) {\n    let request = this.host + `/albums/${artistName}`;\n    console.log(\"request\", request);\n    this.http.get(request).subscribe(albums => {\n      console.log(\"have albums\", albums);\n      callback(albums);\n    });\n  }\n  createAlbum(album, callback) {\n    // Add a new album\n    this.http.post(this.host + \"/albums\", album).subscribe(data => {\n      callback();\n    });\n  }\n  updateAlbum(album, callback) {\n    this.http.put(this.host + \"/albums\", album).subscribe(data => {\n      callback();\n    });\n  }\n  deleteAlbum(id, callback) {\n    this.http.delete(this.host + \"/albums/\" + id).subscribe(data => {\n      callback();\n    });\n  }\n}\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["exampledata","MusicServiceService","constructor","http","host","albums","getArtists","callback","get","subscribe","artists","getAlbums","getAlbumsOfArtist","artistName","request","console","log","createAlbum","album","post","data","updateAlbum","put","deleteAlbum","id","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Coding\\GCU\\CST-391\\week4\\musicapp\\src\\app\\service\\music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport exampledata from '../../data/sample-music-data.json';\nimport { HttpClient } from '@angular/common/http';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n\n  private host = \"http://localhost:5000\"\n  albums: Album[] = exampledata;\n\n  constructor(private http: HttpClient) {}\n \n\n\n  \n  \n  public getArtists(callback: (artists: Artist[]) => void): void {\n\n    this.http.get<Artist[]>(this.host + \"/artists\")\n      .subscribe((artists: Artist[]) => {\n        callback(artists);\n      });\n  }\n\n\n  public getAlbums(callback: (albums: Album[]) => void): void{\n    // Return the list of albums\n\n    this.http.get<Album[]>(this.host + \"/albums\").\n      subscribe((albums: Album[]) => {\n        callback(albums);\n      });\n  }\n\n  public getAlbumsOfArtist(artistName: String, callback: (albums: Album[]) => void): void {\n    \n    let request = this.host + `/albums/${artistName}`;\n    console.log(\"request\", request);\n    this.http.get<Album[]>(request).\n      subscribe((albums: Album[]) => {\n        console.log(\"have albums\", albums);\n        callback(albums);\n      });\n  }\n\n  public createAlbum(album: Album, callback: () => void): void {\n    // Add a new album\n    this.http.post<Album>(this.host + \"/albums\", album)\n      .subscribe((data) => {\n        callback();\n      });\n  }\n\n  public updateAlbum(album: Album, callback: () => void): void {\n    this.http.put<Album>(this.host + \"/albums\", album)\n      .subscribe((data) => {\n        callback();\n      });\n  }\n\n  public deleteAlbum(id: number, callback: () => void ): void {\n    this.http.delete(this.host + \"/albums/\" + id)\n      .subscribe((data) => {\n        callback();\n      });\n  }\n}\n"],"mappings":"AACA,OAAOA,WAAW,MAAM,mCAAmC;;;AAM3D,OAAM,MAAOC,mBAAmB;EAK9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,IAAI,GAAG,uBAAuB;IACtC,KAAAC,MAAM,GAAYL,WAAW;EAEU;EAMhCM,UAAUA,CAACC,QAAqC;IAErD,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAW,IAAI,CAACJ,IAAI,GAAG,UAAU,CAAC,CAC5CK,SAAS,CAAEC,OAAiB,IAAI;MAC/BH,QAAQ,CAACG,OAAO,CAAC;IACnB,CAAC,CAAC;EACN;EAGOC,SAASA,CAACJ,QAAmC;IAClD;IAEA,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,IAAI,CAACJ,IAAI,GAAG,SAAS,CAAC,CAC3CK,SAAS,CAAEJ,MAAe,IAAI;MAC5BE,QAAQ,CAACF,MAAM,CAAC;IAClB,CAAC,CAAC;EACN;EAEOO,iBAAiBA,CAACC,UAAkB,EAAEN,QAAmC;IAE9E,IAAIO,OAAO,GAAG,IAAI,CAACV,IAAI,GAAG,WAAWS,UAAU,EAAE;IACjDE,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC/B,IAAI,CAACX,IAAI,CAACK,GAAG,CAAUM,OAAO,CAAC,CAC7BL,SAAS,CAAEJ,MAAe,IAAI;MAC5BU,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEX,MAAM,CAAC;MAClCE,QAAQ,CAACF,MAAM,CAAC;IAClB,CAAC,CAAC;EACN;EAEOY,WAAWA,CAACC,KAAY,EAAEX,QAAoB;IACnD;IACA,IAAI,CAACJ,IAAI,CAACgB,IAAI,CAAQ,IAAI,CAACf,IAAI,GAAG,SAAS,EAAEc,KAAK,CAAC,CAChDT,SAAS,CAAEW,IAAI,IAAI;MAClBb,QAAQ,EAAE;IACZ,CAAC,CAAC;EACN;EAEOc,WAAWA,CAACH,KAAY,EAAEX,QAAoB;IACnD,IAAI,CAACJ,IAAI,CAACmB,GAAG,CAAQ,IAAI,CAAClB,IAAI,GAAG,SAAS,EAAEc,KAAK,CAAC,CAC/CT,SAAS,CAAEW,IAAI,IAAI;MAClBb,QAAQ,EAAE;IACZ,CAAC,CAAC;EACN;EAEOgB,WAAWA,CAACC,EAAU,EAAEjB,QAAoB;IACjD,IAAI,CAACJ,IAAI,CAACsB,MAAM,CAAC,IAAI,CAACrB,IAAI,GAAG,UAAU,GAAGoB,EAAE,CAAC,CAC1Cf,SAAS,CAAEW,IAAI,IAAI;MAClBb,QAAQ,EAAE;IACZ,CAAC,CAAC;EACN;;AA5DWN,mBAAmB,C;mBAAnBA,mBAAmB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnB5B,mBAAmB,C;SAAnBA,mBAAmB;EAAA6B,OAAA,EAAnB7B,mBAAmB,CAAA8B,IAAA;EAAAC,UAAA,EADN;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}